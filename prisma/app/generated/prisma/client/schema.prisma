// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  first_name String
  last_name  String
  role       Role     @relation(fields: [role_id], references: [id])
  role_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  users      User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("roles")
}

model Child {
  id          Int              @id @default(autoincrement())
  class       Class            @relation(fields: [class_id], references: [id])
  class_id    Int
  evaluations Evaluation[]
  milestones  ChildMilestone[]
  name        String
  age         Int
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt

  @@map("children")
}

model Class {
  id         Int      @id @default(autoincrement())
  children   Child[]
  name       String
  min_age    Int
  max_age    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("classes")
}

model Evaluation {
  id         Int      @id @default(autoincrement())
  child      Child    @relation(fields: [child_id], references: [id])
  child_id   Int
  score      Int
  comments   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("evaluations")
}

model Milestone {
  id          Int              @id @default(autoincrement())
  category_id Int
  category    Category         @relation(fields: [category_id], references: [id])
  milestones  ChildMilestone[]
  name        String
  description String
  min_age     Int
  max_age     Int
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt

  @@map("milestones")
}

model ChildMilestone {
  id           Int       @id @default(autoincrement())
  child        Child     @relation(fields: [child_id], references: [id])
  child_id     Int
  milestone    Milestone @relation(fields: [milestone_id], references: [id])
  milestone_id Int
  achieved     Boolean   @default(false)
  achieved_at  DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@map("children_milestones")
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  milestones  Milestone[]
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  @@map("categories")
}
